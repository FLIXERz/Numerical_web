{"ast":null,"code":"export function PerformOperation(a, n, flag) {\n  let arr = [];\n  let i,\n    j,\n    k = 0,\n    c;\n  // Performing elementary operations\n  for (i = 0; i < n; i++) {\n    if (a[i][i] === 0) {\n      c = 1;\n      while (i + c < n && a[i + c][i] === 0) c++;\n      if (i + c === n) {\n        flag = 1;\n        break;\n      }\n      for (j = i, k = 0; k <= n; k++) {\n        let temp = a[j][k];\n        a[j][k] = a[j + c][k];\n        a[j + c][k] = temp;\n      }\n    }\n    for (j = 0; j < n; j++) {\n      // Excluding all i == j\n      if (i !== j) {\n        let p = a[j][i] / a[i][i];\n        for (k = 0; k <= n; k++) a[j][k] = a[j][k] - a[i][k] * p;\n      }\n    }\n  }\n  let x1 = a[0][3] / a[0][0];\n  let x2 = a[1][3] / a[1][1];\n  let x3 = a[2][3] / a[2][2];\n  arr.push(x1);\n  arr.push(x2);\n  arr.push(x3);\n  console.log(arr);\n  return arr;\n}\n\n//#################   2x2   ###################################\nexport function PerformOperation2x2(a, n, flag) {\n  let arr = [];\n  let i,\n    j,\n    k = 0,\n    c;\n  // Performing elementary operations\n  for (i = 0; i < n; i++) {\n    if (a[i][i] === 0) {\n      c = 1;\n      while (i + c < n && a[i + c][i] === 0) c++;\n      if (i + c === n) {\n        flag = 1;\n        break;\n      }\n      for (j = i, k = 0; k <= n; k++) {\n        let temp = a[j][k];\n        a[j][k] = a[j + c][k];\n        a[j + c][k] = temp;\n      }\n    }\n    for (j = 0; j < n; j++) {\n      // Excluding all i == j\n      if (i !== j) {\n        let p = a[j][i] / a[i][i];\n        for (k = 0; k <= n; k++) a[j][k] = a[j][k] - a[i][k] * p;\n      }\n    }\n  }\n  let x1 = a[0][2] / a[0][0];\n  let x2 = a[1][2] / a[1][1];\n  arr.push(x1);\n  arr.push(x2);\n  console.log(arr);\n  return arr;\n}\n\n//###################################  4x4  ############################\nexport function PerformOperation4x4(a, n, flag) {\n  let arr = [];\n  let i,\n    j,\n    k = 0,\n    c;\n  // Performing elementary operations\n  for (i = 0; i < n; i++) {\n    if (a[i][i] === 0) {\n      c = 1;\n      while (i + c < n && a[i + c][i] === 0) c++;\n      if (i + c === n) {\n        flag = 1;\n        break;\n      }\n      for (j = i, k = 0; k <= n; k++) {\n        let temp = a[j][k];\n        a[j][k] = a[j + c][k];\n        a[j + c][k] = temp;\n      }\n    }\n    for (j = 0; j < n; j++) {\n      // Excluding all i == j\n      if (i !== j) {\n        let p = a[j][i] / a[i][i];\n        for (k = 0; k <= n; k++) a[j][k] = a[j][k] - a[i][k] * p;\n      }\n    }\n  }\n  let x1 = a[0][4] / a[0][0];\n  let x2 = a[1][4] / a[1][1];\n  let x3 = a[2][4] / a[2][2];\n  let x4 = a[3][4] / a[3][3];\n  arr.push(x1);\n  arr.push(x2);\n  arr.push(x3);\n  arr.push(x4);\n  console.log(arr);\n  return arr;\n}\n//###################################  5x5  ############################\nexport function PerformOperation5x5(a, n, flag) {\n  let arr = [];\n  let i,\n    j,\n    k = 0,\n    c;\n  // Performing elementary operations\n  for (i = 0; i < n; i++) {\n    if (a[i][i] === 0) {\n      c = 1;\n      while (i + c < n && a[i + c][i] === 0) c++;\n      if (i + c === n) {\n        flag = 1;\n        break;\n      }\n      for (j = i, k = 0; k <= n; k++) {\n        let temp = a[j][k];\n        a[j][k] = a[j + c][k];\n        a[j + c][k] = temp;\n      }\n    }\n    for (j = 0; j < n; j++) {\n      // Excluding all i == j\n      if (i !== j) {\n        let p = a[j][i] / a[i][i];\n        for (k = 0; k <= n; k++) a[j][k] = a[j][k] - a[i][k] * p;\n      }\n    }\n  }\n  let x1 = a[0][5] / a[0][0];\n  let x2 = a[1][5] / a[1][1];\n  let x3 = a[2][5] / a[2][2];\n  let x4 = a[3][5] / a[3][3];\n  let x5 = a[4][5] / a[4][4];\n  arr.push(x1);\n  arr.push(x2);\n  arr.push(x3);\n  arr.push(x4);\n  arr.push(x5);\n  console.log(arr);\n  return arr;\n}\n\n// Driver code\n// let a=[[ 0, 2, 1, 4 ],\n//         [ 1, 1, 2, 6 ],\n//         [ 2, 1, 1, 7 ]];\n// Order of Matrix(n)\n// let n = 3, flag = 0;","map":{"version":3,"names":["PerformOperation","a","n","flag","arr","i","j","k","c","temp","p","x1","x2","x3","push","console","log","PerformOperation2x2","PerformOperation4x4","x4","PerformOperation5x5","x5"],"sources":["C:/Users/Azul/homework/Numerical/PJ/src/Components_Linear/Test_Gaussjordan.js"],"sourcesContent":["\r\nexport function PerformOperation(a,n, flag)\r\n{\r\n    let arr =[];\r\n    let i, j, k = 0, c\r\n    // Performing elementary operations\r\n    for (i = 0; i < n; i++)\r\n    {\r\n        if (a[i][i] === 0)\r\n        {\r\n            c = 1;\r\n            while ((i + c) < n && a[i + c][i] === 0)\r\n                c++;        \r\n            if ((i + c) === n)\r\n            {\r\n                flag = 1;\r\n                break;\r\n            }\r\n            for (j = i, k = 0; k <= n; k++)\r\n            {\r\n                let temp =a[j][k];\r\n                a[j][k] = a[j+c][k];\r\n                a[j+c][k] = temp;\r\n            }\r\n        }\r\n   \r\n        for (j = 0; j < n; j++)\r\n        {\r\n               \r\n            // Excluding all i == j\r\n            if (i !== j)\r\n            {\r\n                let p = a[j][i] / a[i][i];\r\n   \r\n                for (k = 0; k <= n; k++)                \r\n                    a[j][k] = a[j][k] - (a[i][k]) * p;            \r\n            }\r\n        }\r\n    }\r\n    let x1 = a[0][3] / a[0][0];\r\n    let x2 = a[1][3] / a[1][1];\r\n    let x3 = a[2][3] / a[2][2];\r\n    \r\n    arr.push(x1); \r\n    arr.push(x2); \r\n    arr.push(x3); \r\n\r\n    console.log(arr)\r\n    return arr ;\r\n}\r\n\r\n//#################   2x2   ###################################\r\nexport function PerformOperation2x2(a,n, flag)\r\n{\r\n    let arr =[];\r\n    let i, j, k = 0, c\r\n    // Performing elementary operations\r\n    for (i = 0; i < n; i++)\r\n    {\r\n        if (a[i][i] === 0)\r\n        {\r\n            c = 1;\r\n            while ((i + c) < n && a[i + c][i] === 0)\r\n                c++;        \r\n            if ((i + c) === n)\r\n            {\r\n                flag = 1;\r\n                break;\r\n            }\r\n            for (j = i, k = 0; k <= n; k++)\r\n            {\r\n                let temp =a[j][k];\r\n                a[j][k] = a[j+c][k];\r\n                a[j+c][k] = temp;\r\n            }\r\n        }\r\n   \r\n        for (j = 0; j < n; j++)\r\n        {\r\n               \r\n            // Excluding all i == j\r\n            if (i !== j)\r\n            {\r\n                let p = a[j][i] / a[i][i];\r\n   \r\n                for (k = 0; k <= n; k++)                \r\n                    a[j][k] = a[j][k] - (a[i][k]) * p;            \r\n            }\r\n        }\r\n    }\r\n    let x1 = a[0][2] / a[0][0];\r\n    let x2 = a[1][2] / a[1][1];\r\n    \r\n    arr.push(x1); \r\n    arr.push(x2); \r\n   \r\n\r\n    console.log(arr)\r\n    return arr ;\r\n}\r\n\r\n//###################################  4x4  ############################\r\nexport function PerformOperation4x4(a,n, flag)\r\n{\r\n    let arr =[];\r\n    let i, j, k = 0, c\r\n    // Performing elementary operations\r\n    for (i = 0; i < n; i++)\r\n    {\r\n        if (a[i][i] === 0)\r\n        {\r\n            c = 1;\r\n            while ((i + c) < n && a[i + c][i] === 0)\r\n                c++;        \r\n            if ((i + c) === n)\r\n            {\r\n                flag = 1;\r\n                break;\r\n            }\r\n            for (j = i, k = 0; k <= n; k++)\r\n            {\r\n                let temp =a[j][k];\r\n                a[j][k] = a[j+c][k];\r\n                a[j+c][k] = temp;\r\n            }\r\n        }\r\n   \r\n        for (j = 0; j < n; j++)\r\n        {\r\n               \r\n            // Excluding all i == j\r\n            if (i !== j)\r\n            {\r\n                let p = a[j][i] / a[i][i];\r\n   \r\n                for (k = 0; k <= n; k++)                \r\n                    a[j][k] = a[j][k] - (a[i][k]) * p;            \r\n            }\r\n        }\r\n    }\r\n    let x1 = a[0][4] / a[0][0];\r\n    let x2 = a[1][4] / a[1][1];\r\n    let x3 = a[2][4] / a[2][2];\r\n    let x4 = a[3][4] / a[3][3];\r\n    \r\n    \r\n    arr.push(x1); \r\n    arr.push(x2); \r\n    arr.push(x3); \r\n    arr.push(x4); \r\n   \r\n    console.log(arr)\r\n    return arr ;\r\n}\r\n//###################################  5x5  ############################\r\nexport function PerformOperation5x5(a,n, flag)\r\n{\r\n    let arr =[];\r\n    let i, j, k = 0, c\r\n    // Performing elementary operations\r\n    for (i = 0; i < n; i++)\r\n    {\r\n        if (a[i][i] === 0)\r\n        {\r\n            c = 1;\r\n            while ((i + c) < n && a[i + c][i] === 0)\r\n                c++;        \r\n            if ((i + c) === n)\r\n            {\r\n                flag = 1;\r\n                break;\r\n            }\r\n            for (j = i, k = 0; k <= n; k++)\r\n            {\r\n                let temp =a[j][k];\r\n                a[j][k] = a[j+c][k];\r\n                a[j+c][k] = temp;\r\n            }\r\n        }\r\n   \r\n        for (j = 0; j < n; j++)\r\n        {\r\n               \r\n            // Excluding all i == j\r\n            if (i !== j)\r\n            {\r\n                let p = a[j][i] / a[i][i];\r\n   \r\n                for (k = 0; k <= n; k++)                \r\n                    a[j][k] = a[j][k] - (a[i][k]) * p;            \r\n            }\r\n        }\r\n    }\r\n    let x1 = a[0][5] / a[0][0];\r\n    let x2 = a[1][5] / a[1][1];\r\n    let x3 = a[2][5] / a[2][2];\r\n    let x4 = a[3][5] / a[3][3];\r\n    let x5 = a[4][5] / a[4][4];\r\n    \r\n    \r\n    arr.push(x1); \r\n    arr.push(x2); \r\n    arr.push(x3); \r\n    arr.push(x4); \r\n    arr.push(x5); \r\n   \r\n\r\n    console.log(arr)\r\n    return arr ;\r\n}\r\n\r\n// Driver code\r\n// let a=[[ 0, 2, 1, 4 ],\r\n//         [ 1, 1, 2, 6 ],\r\n//         [ 2, 1, 1, 7 ]];\r\n// Order of Matrix(n)\r\n// let n = 3, flag = 0;\r\n \r\n\r\n\r\n \r\n\r\n \r\n\r\n\r\n \r\n \r\n \r\n\r\n \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}