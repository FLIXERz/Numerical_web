{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Azul\\\\homework\\\\Numerical\\\\1\\\\PJ\\\\src\\\\Components_Inter\\\\Form_SplineLinear.js\";\nimport React, { useState } from \"react\";\nimport Input2x2 from \"../Input_spline/Input2x2\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nexport default function Form_SplineLinear() {\n  const [matrix, setMatrix] = useState([]);\n  const [value, setValue] = useState(0);\n  const [interpolatedValue, setInterpolatedValue] = useState(null);\n  const calculateLinearSpline = () => {\n    let result = null;\n    if (matrix.length === 2) {\n      const [x1, x2, y1] = matrix[0];\n      const [x2Next, x3, y2] = matrix[1];\n      if (value >= x1 && value <= x2Next) {\n        const slope = (y2 - y1) / (x2Next - x1);\n        result = y1 + slope * (value - x1);\n      }\n    }\n    setInterpolatedValue(result);\n  };\n  const chartData = matrix.map(point => ({\n    x: point[0],\n    y: point[2]\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Linear Spline Interpolation\"), /*#__PURE__*/React.createElement(Input2x2, {\n    setMatrix: setMatrix,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    value: value,\n    onChange: e => setValue(parseFloat(e.target.value)),\n    placeholder: \"Value to interpolate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: calculateLinearSpline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Calculate Linear Spline\")), interpolatedValue !== null && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 38\n    }\n  }, \"Interpolated Value: \", interpolatedValue), /*#__PURE__*/React.createElement(LineChart, {\n    width: 450,\n    height: 300,\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"x\",\n    label: {\n      value: \"X\",\n      position: \"insideBottomRight\",\n      offset: -10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    label: {\n      value: \"Y\",\n      angle: -90,\n      position: \"insideLeft\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"y\",\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","Input2x2","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Form_SplineLinear","matrix","setMatrix","value","setValue","interpolatedValue","setInterpolatedValue","calculateLinearSpline","result","length","x1","x2","y1","x2Next","x3","y2","slope","chartData","map","point","x","y","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","parseFloat","target","placeholder","onClick","width","height","data","strokeDasharray","dataKey","label","position","offset","angle","stroke","activeDot","r"],"sources":["C:/Users/Azul/homework/Numerical/1/PJ/src/Components_Inter/Form_SplineLinear.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Input2x2 from \"../Input_spline/Input2x2\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nexport default function Form_SplineLinear() {\r\n  const [matrix, setMatrix] = useState([]);\r\n  const [value, setValue] = useState(0);\r\n  const [interpolatedValue, setInterpolatedValue] = useState(null);\r\n\r\n  const calculateLinearSpline = () => {\r\n    let result = null;\r\n    if (matrix.length === 2) {\r\n      const [x1, x2, y1] = matrix[0];\r\n      const [x2Next, x3, y2] = matrix[1];\r\n      \r\n      if (value >= x1 && value <= x2Next) {\r\n        const slope = (y2 - y1) / (x2Next - x1);\r\n        result = y1 + slope * (value - x1);\r\n      }\r\n    }\r\n    setInterpolatedValue(result);\r\n  };\r\n\r\n  const chartData = matrix.map((point) => ({\r\n    x: point[0],\r\n    y: point[2],\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h3>Linear Spline Interpolation</h3>\r\n      <Input2x2 setMatrix={setMatrix} />\r\n\r\n      <div>\r\n        <input\r\n          type=\"number\"\r\n          value={value}\r\n          onChange={(e) => setValue(parseFloat(e.target.value))}\r\n          placeholder=\"Value to interpolate\"\r\n        />\r\n        <button onClick={calculateLinearSpline}>Calculate Linear Spline</button>\r\n      </div>\r\n\r\n      {interpolatedValue !== null && <p>Interpolated Value: {interpolatedValue}</p>}\r\n\r\n      <LineChart width={450} height={300} data={chartData}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"x\" label={{ value: \"X\", position: \"insideBottomRight\", offset: -10 }} />\r\n        <YAxis label={{ value: \"Y\", angle: -90, position: \"insideLeft\" }} />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}